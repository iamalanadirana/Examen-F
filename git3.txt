git --version:  mirar la vercion del git
git config --global user.email iam@hotmail.com: configurar mi correo
git config --global user.name iamalex:usuario de git
gir config --global color.ui #####:configuracion de colores
git init ###= crear repositorios
copy con ####: crear archivos
git add ###: agregar al limbo
git commit -m "######":configuracion de landing comprometer los archivos
git commit --amend =commit del mismo archivo modificado
git tag: agregar etiquetas
git tag -a 0.5 -m "anunciado ####"
git tag -l: mirar el estado del anunciado
git log: mirar todos los landing
git tag -f -a 0.1 -m "enunciado del tag"y nombre del commit:renombrear tag
git tag -d nombre del tag:borrar tag
git log --oneline: resumir lo tag
git log --oneline --graph :poner multiple parametros
git diff #numero del tag sacarlo con git log --oneline#=mostrar diferencias
git diff [version 1] vs [version 2]
git log -#Numero de ultimos commit que quiero ver
##tres tipos de reset git reset --soft --mixed --hard##
git reset --soft #colocamos el anterior commit que queremos corrregir#
git reset --mixed #numero de anterior commit para borrar el ultimo#
git reset --hard #nombre del commit# borra todo
git config --global core.editor "atom --wait" =configurar editores
git branch ##= crear ramas
git branch -l =alistar ramas
git branch -d ## =borra ramas
git branch -m  ## ## =renombrar ramas
git checkout = moverse entre ramas
git checkout -b # = crear y navegar entre ramas
git merge ## = mezclar rama
git log --oneline --graph =mirar graficos de las ramas
git rebase ###=reescribir la historia del proyecto
git rebase -i ### = reescribir de forma didactica con editor
git status = guardar sin cambios modo de limbo
git stash list = lista de cambios del limbo
git star apply =apliacar cambios
git checkout -- #### = reseriar modificaciones
git cherry-pick #commit# = eliminando commit selectivos